"""–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
import logging

logger = logging.getLogger(__name__)


async def add_user_to_chats(bot: Bot, user_id: int, chat_ids: list[str]) -> tuple[list[str], list[str]]:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        chat_ids: –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤
    
    Returns:
        tuple: (—Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–π, —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫)
    """
    success = []
    errors = []
    
    for chat_id in chat_ids:
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            invite_link = await bot.create_chat_invite_link(
                chat_id=int(chat_id),
                member_limit=1  # –°—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                chat_id=user_id,
                text=f"–í—ã –æ–¥–æ–±—Ä–µ–Ω—ã! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É:\n{invite_link.invite_link}"
            )
            success.append(chat_id)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç {chat_id}")
            
        except TelegramBadRequest as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}"
            errors.append(error_msg)
            logger.error(error_msg)
        except Exception as e:
            error_msg = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}"
            errors.append(error_msg)
            logger.error(error_msg)
    
    return success, errors


def format_application(user_id: int, username: str | None, text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
        text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    username_str = f"@{username}" if username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    return (
        f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username_str}\n"
        f"üÜî ID: {user_id}\n\n"
        f"üìã –û—Ç–≤–µ—Ç—ã:\n{text}"
    )

